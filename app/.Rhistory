model.sel = lm(life.exp~inc, data=statedata[selected.states,])
abline(model.sel, col=2)
## Make a confidence band.
#### first calculate the width of the band, W.
ww=qt(0.975, 10-2)
#### generate plotting X values.
plot.x<-data.frame(inc=seq(3000, 7000, 1))
#### se.fit=T is an option to save
#### the standard error of the fitted values.
plot.fit<-predict(model.sel, plot.x,
level=0.95, interval="confidence",
se.fit=T)
#### lines is a function to add connected lines
#### to an existing plot.
lines(plot.x$inc, plot.fit$fit[,1]+ww*plot.fit$se.fit,
col=2, lty=2)
lines(plot.x$inc, plot.fit$fit[,1]-ww*plot.fit$se.fit,
col=2, lty=2)
}
par(mfrow=c(2,2)) # create a panel of four plotting areas
for(i in 1:4){
## Plot the population
plot(life.exp~inc, data=statedata,
xlab="Life Expectancy", ylab="Income",
#title=paste("Random sample", format(i)),
ylim=c(min(life.exp), max(life.exp)+0.3))
abline(model1)
if(i==1){
legend(3030, 74.2,
pch=c(NA, NA, NA, 1, 16),
lty=c(1, 1, 2, NA, NA),
col=c(1, 2, 2, 1, 2),
c("population truth", "sample estimate",
"sample confidence band",
"states", "sampled"),
cex=0.7,
bty="n"
)
}
## Select the sample
selected.states=sample(1:50, 10)
points(statedata[selected.states,"inc"],
statedata[selected.states,"life.exp"], pch=16, col=2)
## Fit a regression line using the sample
model.sel = lm(life.exp~inc, data=statedata[selected.states,])
abline(model.sel, col=2)
## Make a confidence band.
#### first calculate the width of the band, W.
ww=qt(0.975, 10-2)
#### generate plotting X values.
plot.x<-data.frame(inc=seq(3000, 7000, 1))
#### se.fit=T is an option to save
#### the standard error of the fitted values.
plot.fit<-predict(model.sel, plot.x,
level=0.95, interval="confidence",
se.fit=T)
#### lines is a function to add connected lines
#### to an existing plot.
lines(plot.x$inc, plot.fit$fit[,1]+ww*plot.fit$se.fit,
col=2, lty=2)
lines(plot.x$inc, plot.fit$fit[,1]-ww*plot.fit$se.fit,
col=2, lty=2)
}
plot(lstat, medv, pch=16)
lm.fit=lm(medv~.,data=Boston)
library(MASS)
library(ISLR)
attach(Boston)
lm.fit=lm(medv ~ lstat+age,data=Boston)
summary(lm.fit)
lm.fit=lm(medv~.,data=Boston)
summary(lm.fit)
lm.fit1=lm(medv ~.-age,data=Boston)
summary(lm.fit1)
lm.fit1=lm(medv ~ .-age,data=Boston)
summary(lm.fit1)
summary(lm(medv ~ lstat*age,data=Boston))
plot(lstat, medv, pch=16)
iris = read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data", sep = ",", header = FALSE)
names(iris) = c("sepal.length", "sepal.width", "petal.length", "petal.width", "iris.type")
### attach name to each column so that we can directly access each column by its name
attach(iris)
train = sample.int(nrow(iris), 100)
Y = iris.type == "Iris-setosa"
logistic.model = glm(Y ~ sepal.length + sepal.width, data=iris, family = binomial(), subset=train)
logistic.model
plot(sepal.length[train], sepal.width[train], type='p',pch=16, col=(Y[train]+4), xlab="Sepal Length", ylab="Sepal Width")
abline(a = -logistic.model$coefficients[1]/logistic.model$coefficients[3], b = -logistic.model$coefficients[2]/logistic.model$coefficients[3], col='gray', lwd=2)
glm.probs = predict(logistic.model, iris[-train,], type="response")
glm.pred = glm.probs>0.5
### summrize the prediction by a confusion matrix
table(Y[-train], glm.pred)
library(MASS)
lda.model<-lda(Y ~ sepal.length + sepal.width, data=iris, subset=train)
lda.model
plot(lda.model)
plot(x,y,type="l")
x<-5:10
y<-11:16
plot(x,y,type="l")
text("nih")
?text
x<-5:10
y<-11:16
plot(x,y,type="l")
text(x,y,"hihao")
text(x+1,y+1,"hihao")
x<-5:10
y<-11:16
plot(x,y,type="l")
text(x+1,y+1,"hihao")
text(5,y+1,"hihao")
x<-5:10
y<-11:16
plot(x,y,type="l")
text(5,y+1,"hihao")
?text
x<-5:10
y<-11:16
plot(x,y,type="l")
text(5,5,"nihao")
text(5,10,"nihao")
text(5,17,"nihao")
x<-5:10
y<-11:16
plot(x,y,type="l")
text(5,17,"nihao")
diff(stock)[2:nrow(stock),]
?diff
diff(1:10,2)
diff(1:10)
View(return)
#install.packages("quantmod")
install.packages("factoextra")
tickers<-c("JNJ","UNH","PFE","NVS","ABBV")
getSymbols(tickers,from="2015-01-01",to="2018-01-01")
Closeprices<-do.call(merge,lapply(tickers,function(x)Cl(get(x))))
colnames(Closeprices)
plot(Closeprices)
library(quantmod)
tickers<-c("JNJ","UNH","PFE","NVS","ABBV")
getSymbols(tickers,from="2015-01-01",to="2018-01-01")
Closeprices<-do.call(merge,lapply(tickers,function(x)Cl(get(x))))
colnames(Closeprices)
plot(Closeprices)
View(Closeprices)
library(ggplot2)
ggplot(Closeprices)+
geom_line(aes(x=rownames(Closeprices),y=Closeprices))
rownames(Closeprices)
colnames(Closeprices)
rownames(Closeprices)
Closeprices
row.names(Closeprices)
plot(Closeprices)
colnames(Closeprices)
plot(Closeprices)
text(1,2,"nihao")
ggplot(Closeprices, aes(Date, price))+
geom_line() +
scale_x_date(format = "%b-%Y") + xlab("") + ylab("Daily Views")
ggplot(Closeprices, aes(Date, price))+
geom_line() +
scale_x_date(format = "%b-%Y") + xlab("") + ylab("Daily Views")
ggplot(Closeprices, aes(Date, price))+
geom_line()
ggplot(Closeprices)+
geom_line()
ggplot(Closeprices)+
geom_line()
class(Closeprices)
class(x)
?do.call
?Cl
data.frame(Closeprices)
class(data.frame(Closeprices))
Closeprices<-data.frame(Closeprices)
colnames(Closeprices)
rownames(Closeprices)
ggplot(Closeprices)+
geom_line()
ggplot(Closeprices)+
geom_line(aes(x=rownames((Closeprices)),y=colnames(Closeprices)))
#Closeprices<-data.frame(Closeprices)
Closeprices$Date<-rownames(Closeprices)
ggplot(Closeprices)+
ggplot(Closeprices)+
geom_line(aes(x=Date,y=JNJ.Close)
ggplot(Closeprices)+
geom_line(aes(x=Date,y=JNJ.Close)
ggplot(Closeprices)+
geom_line(aes(x=Date,y=JNJ.Close))
ggplot(Closeprices)+
geom_line(aes(x=Date,y=JNJ.Close))
ggplot(Closeprices)+
geom_line(aes(x=Date,y=JNJ.Close))
ggplot(Closeprices)+
geom_line(aes(x=Date,y=JNJ.Close))+
geom_line(aes(x=Date,y=UNH.Close))
plot(Closeprices)
#Closeprices<-data.frame(Closeprices)
#Closeprices$Date<-rownames(Closeprices)
colnames(Closeprices)
ggplot(Closeprices)+
geom_line()
ggplot(data=Closeprices)+
geom_line(aes(Date,JNJ.Close))
ggplot(data=Closeprices,aes(Date,JNJ.Close))+
geom_line()
?date_formate
ggplot(Closeprices, aes(Date, JNJ.Close)) +
geom_line() +
xlab("Date") + ylab("Air Temperature (C)") +
scale_x_date(labels=date_format ("%y-%m-%d"))
ggplot(Closeprices, aes(Date, JNJ.Close)) +
geom_line() +
xlab("Date") + ylab("Air Temperature (C)") +
scale_x_date(labels=as.Date(Date,format = "%y-%m-%d"))
ggplot(Closeprices, aes(Date, JNJ.Close)) +
geom_line() +
xlab("Date") + ylab("Air Temperature (C)") +
scale_x_date(labels=as.Date(Dates,format = "%y-%m-%d"))
ggplot(Closeprices, aes(Dates, JNJ.Close)) +
geom_line() +
xlab("Date") + ylab("Air Temperature (C)") +
scale_x_date(labels=as.Date(Dates,format = "%y-%m-%d"))
ggplot(Closeprices, aes(Dates, JNJ.Close)) +
geom_line() +
xlab("Date") + ylab("Air Temperature (C)") +
scale_x_date(labels=format = "%y-%m-%d")
ggplot(Closeprices, aes(Dates, JNJ.Close)) +
geom_line() +
xlab("Date") + ylab("Air Temperature (C)") +
scale_x_date(labels=format ("%y-%m-%d"))
ggplot(Closeprices) +
geom_line(aes(x=Date,y=JNJ.Close)) +
xlab("Date") + ylab("Air Temperature (C)") +
scale_x_date(labels=format ("%y-%m-%d"))
?scale_x_date
ggplot(Closeprices) +
geom_line(aes(x=Date,y=JNJ.Close))
library(quantmod)
tickers<-c("JNJ","UNH","PFE","NVS","ABBV")
getSymbols(tickers,from="2015-01-01",to="2018-01-01")
Closeprices<-do.call(merge,lapply(tickers,function(x)Cl(get(x))))
#Closeprices<-data.frame(Closeprices)
#Closeprices$Date<-rownames(Closeprices)
colnames(Closeprices)
plot(Closeprices)
class(Closeprices)
plot(Closeprices,legend.loc = "TOP")
plot(Closeprices,legend.loc = TOP)
plot(Closeprices,legend.loc = "top")
library(factoextra)
fviz_pca_biplot(princomp(stock,cor=FALSE),repel=FALSE)
fviz_pca_biplot(princomp(stock,cor=FALSE),repel=FALSE,col.var = "#2E9FDF",col.ind = "#696969")
fviz_pca_screeplot(princomp(stock,cor=FALSE))
fviz_pca_contrib(princomp(stock,cor=FALSE))
?factorextra
fviz_eig(princomp(stock,cor=FALSE))
fviz_pca_biplot(princomp(stock,cor=FALSE),repel=TRUE,col.var = "#2E9FDF",col.ind = "#696969")
fviz_pca_biplot(princomp(stock,cor=FALSE),repel=FALSE,col.var = "#2E9FDF",col.ind = "#696969")
fviz_eig(princomp(stock,cor=FALSE))
fviz_pca_biplot(princomp(stock,cor=TRUE),repel=FALSE,col.var = "#2E9FDF",col.ind = "#696969")
fviz_eig(princomp(stock,cor=TRUE))
fviz_pca_biplot(princomp(return,cor=TRUE),repel=FALSE,col.var = "#2E9FDF",col.ind = "#696969")
fviz_eig(princomp(return,cor=TRUE))
library(choroplethrZip)
knitr::opts_chunk$set(echo = TRUE)
install.packages("shiny")
library(shiny)
runApp('Desktop/Rent')
runApp('Desktop/Rent')
install.packages("choroplethrZip")
runApp('Desktop/Rent')
runApp('Desktop/Rent')
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Desktop/Rent')
runApp('Desktop/Rent')
setwd("~/Documents/2018SpringCourse/Applied Data Science/Spring2018-Project2-Group3/data")
?getwd
setwd("~/Documents/2018SpringCourse/Applied Data Science/Spring2018-Project2-Group3/data/rental price")
## Read all five types of apartments and their rent price in 2017
all_data <- read.csv("getwd()/rental price/Zip_MedianRentalPrice_1Bedroom.csv")
## Read all five types of apartments and their rent price in 2017
all_data <- read.csv("./rental price/Zip_MedianRentalPrice_1Bedroom.csv")
## Read all five types of apartments and their rent price in 2017
all_data <- read.csv("../rental price/Zip_MedianRentalPrice_1Bedroom.csv")
## Read all five types of apartments and their rent price in 2017
setwd("./rental price")
getwd()
setwd("~/Documents/2018SpringCourse/Applied Data Science/Spring2018-Project2-Group3/data")
## Read all five types of apartments and their rent price in 2017
setwd("./rental price")
1B_jhy <- read.csv("Zip_MedianRentalPrice_1Bedroom.csv")
1B<- read.csv("Zip_MedianRentalPrice_1Bedroom.csv")
1b_jhy<- read.csv("Zip_MedianRentalPrice_1Bedroom.csv")
1B_jhy<-read.csv("Zip_MedianRentalPrice_1Bedroom.csv")
oneB_jhy<-read.csv("Zip_MedianRentalPrice_1Bedroom.csv")
price_files<-list.files(path = getwd(),full.names = T,pattern = "Zip_MedianRentalPrice*")
price_files
price_lists <-lapply(price_files,function(i) read.csv(i))
price <- read.csv("Zip_MedianRentalPrice_1Bedroom.csv")
View(price)
rent_type <- c("Studio","OneBedroom","TwoBedroom","ThreeBedroom","FourBedroom","FiveBedroom")
price<-data.frame()
rent_type <- c("OneBedroom","TwoBedroom","ThreeBedroom","FourBedroom","FiveBedroom","Studio")
price_files <- list.files(path = getwd(),full.names = T,pattern = "Zip_MedianRentalPrice*")
rent_type <- c("OneBedroom","TwoBedroom","ThreeBedroom","FourBedroom","FiveBedroom","Studio")
price<-data.frame()
for(i in 1:6){
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
price<-rbind(price,tmp)
}
price<-data.frame()
View(price)
tmp<-read.csv(price_files[i])
for(i in 1:6){
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
price<-rbind(price,tmp)
}
i=1
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
price<-rbind(price,tmp)
i=2
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
price<-rbind(price,tmp)
i=3
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
price<-rbind(price,tmp)
View(tmp)
dim(tmp)
dim(price)
-11:-1
tmp<-tmp[tmp$Metro=="New York"&tmp$CountyName=="New York",c(-13:-1)]
for(i in 1:6){
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
tmp<-tmp[tmp$Metro=="New York"&tmp$CountyName=="New York",c("X2017.01")]
price<-rbind(price,tmp)
}
for(i in 1:6){
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
tmp<-tmp[tmp$Metro=="New York"&tmp$CountyName=="New York","X2017.01"]
price<-rbind(price,tmp)
}
View(price)
i=1
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
tmp<-tmp[tmp$Metro=="New York"&tmp$CountyName=="New York","X2017.01"]
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
tmp<-tmp[tmp$Metro=="New York"&tmp$CountyName=="New York",c("X2017.01","X2017.02")]
vIEW(TMP)
View(tmp)
for(i in 1:6){
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
tmp<-tmp[tmp$Metro=="New York"&tmp$CountyName=="New York",c("RegionName","X2017.01","X2017.02","X2017.03","X2017.04","X2017.05","X2017.06","X2017.07","X2017.08","X2017.09","X2017.10","X2017.11","X2017.12")]
price<-rbind(price,tmp)
}
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
tmp<-tmp[tmp$Metro=="New York"&tmp$CountyName=="New York",c("RegionName","X2017.01","X2017.02","X2017.03","X2017.04","X2017.05","X2017.06","X2017.07","X2017.08","X2017.09","X2017.10","X2017.11","X2017.12")]
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
tmp<-tmp[tmp$Metro=="New York"&tmp$CountyName=="New York",c("RegionName","X2017.01","X2017.02","X2017.03","X2017.04","X2017.05","X2017.06","X2017.07","X2017.08","X2017.09","X2017.10","X2017.11","X2017.12","type")]
i=2
price <- data.frame()
price<-rbind(price,tmp)
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
tmp<-tmp[tmp$Metro=="New York"&tmp$CountyName=="New York",c("RegionName","X2017.01","X2017.02","X2017.03","X2017.04","X2017.05","X2017.06","X2017.07","X2017.08","X2017.09","X2017.10","X2017.11","X2017.12","type")]
price<-rbind(price,tmp)
i=3
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
tmp<-tmp[tmp$Metro=="New York"&tmp$CountyName=="New York",c("RegionName","X2017.01","X2017.02","X2017.03","X2017.04","X2017.05","X2017.06","X2017.07","X2017.08","X2017.09","X2017.10","X2017.11","X2017.12","type")]
price<-rbind(price,tmp)
i=4
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
tmp<-tmp[tmp$Metro=="New York"&tmp$CountyName=="New York",c("RegionName","X2017.01","X2017.02","X2017.03","X2017.04","X2017.05","X2017.06","X2017.07","X2017.08","X2017.09","X2017.10","X2017.11","X2017.12","type")]
price<-rbind(price,tmp)
i=5
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
tmp<-tmp[tmp$Metro=="New York"&tmp$CountyName=="New York",c("RegionName","X2017.01","X2017.02","X2017.03","X2017.04","X2017.05","X2017.06","X2017.07","X2017.08","X2017.09","X2017.10","X2017.11","X2017.12","type")]
price<-rbind(price,tmp)
i==6
i=6
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
tmp<-tmp[tmp$Metro=="New York"&tmp$CountyName=="New York",c("RegionName","X2017.01","X2017.02","X2017.03","X2017.04","X2017.05","X2017.06","X2017.07","X2017.08","X2017.09","X2017.10","X2017.11","X2017.12","type")]
price<-rbind(price,tmp)
i=4
i
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
tmp<-tmp[tmp$Metro=="New York"&tmp$CountyName=="New York",c("RegionName","X2017.01","X2017.02","X2017.03","X2017.04","X2017.05","X2017.06","X2017.07","X2017.08","X2017.09","X2017.10","X2017.11","X2017.12","type")]
price<-rbind(price,tmp)
i=5
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
for(i in 1:6){
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
tmp<-tmp[tmp$Metro=="New York"&tmp$CountyName=="New York",c("RegionName","X2017.01","X2017.02","X2017.03","X2017.04","X2017.05","X2017.06","X2017.07","X2017.08","X2017.09","X2017.10","X2017.11","X2017.12","type")]
price<-rbind(price,tmp)
}
price <- data.frame()
for(i in 1:6){
tmp<-read.csv(price_files[i])
tmp$type<-rent_type[i]
tmp<-tmp[tmp$Metro=="New York"&tmp$CountyName=="New York",c("RegionName","X2017.01","X2017.02","X2017.03","X2017.04","X2017.05","X2017.06","X2017.07","X2017.08","X2017.09","X2017.10","X2017.11","X2017.12","type")]
price<-rbind(price,tmp)
}
dim(price)
price$avg<-apply(price[,2:],2,mean)
price$avg<-apply(price[:,2:],2,mean)
price$avg<-apply(price[,-1],2,mean)
price[,-1]
price$avg<-apply(price[,2:-1],2,mean)
price$avg<-apply(price[,2:13],2,mean)
price[,2:13]
View(price[,2:13])
apply(price[,2:13],2,mean)
price$avg<-lapply(price[,2:13],2,mean)
price$avg<-apply(price[,2:13],2,mean)
price$avg<-vector(apply(price[,2:13],2,mean))
list(apply(price[,2:13],2,mean))
class(apply(price[,2:13],2,mean))
apply(price[,2:13],2,mean)
price$avg<-apply(price[,2:13],1,mean)
colnames(price)
install.packages("ggmap")
set.seed(500)
df <- round(data.frame(
x = jitter(rep(-95.36, 50), amount = .3),
y = jitter(rep( 29.76, 50), amount = .3)
), digits = 2)
map <- get_googlemap(’houston’, markers = df, path = df, scale = 2)
map <- get_googlemap('houston',markers = df, path = df, scale = 2)
library(ggmap)
map <- get_googlemap('houston',markers = df, path = df, scale = 2)
ggmap(map, extent = ’device’)
ggmap(map, extent = 'device')
df
map <- get_googlemap('houston',markers = df, scale = 2)
ggmap(map, extent = 'device')
marker_opt <- markerOptions(opacity=0.8,riseOnHover=T)
output$map <- renderLeaflet({
m <- leaflet() %>%  addProviderTiles("Stamen.TonerLite") %>% setView(-73.983,40.7639,zoom = 13) # default map, base layer
leafletProxy("map", data = markers_construction) %>%
addMarkers(~lng,~lat,popup=~name,group="markers_construction",options=marker_opt,icon=list(iconUrl='icon/construction.png',iconSize=c(25,25)))
leafletProxy("map", data = markers_fire_station) %>%
addMarkers(~lng,~lat,popup=NULL,group="markers_fire_station",options=marker_opt,icon=list(iconUrl='icon/fire_station.png',iconSize=c(25,25)))
leafletProxy("map", data = markers_hospital) %>%
addMarkers(~lng,~lat,popup=~name,group="markers_hospital",options=marker_opt,icon=list(iconUrl='icon/hospital.png',iconSize=c(25,25)))
# leafletProxy("map", data = markers_club) %>%
#  addMarkers(~lng,~lat,popup=NULL,group="markers_club",options=marker_opt)
leafletProxy("map") %>% hideGroup(c("markers_club"))
m
})
output$click_complaints_per_day_area_colorbar <- renderImage(previewColors(pal, 0:10/10))
library(shiny)
titlePanel("Hello Shiny!")
runApp('~/Documents/2018SpringCourse/Applied Data Science/Spring2018-Project2-Group3/app')
setwd("~/Documents/2018SpringCourse/Applied Data Science/Spring2018-Project2-Group3/data")
runApp('~/Documents/2018SpringCourse/Applied Data Science/Spring2018-Project2-Group3/app')
titlePanel("Hello Shiny!")
runApp('~/Documents/2018SpringCourse/Applied Data Science/Spring2018-Project2-Group3/app')
install.packages("leaflet")
runApp('~/Documents/2018SpringCourse/Applied Data Science/Spring2018-Project2-Group3/app')
